#!/bin/bash

PROBE_FILE="/fb_host_probe.txt"
 # generated.vcl file must be shared between the cron and varnish containers
GEN_VCL_FILE="/etc/varnish/generated.vcl"
 # varnish.secret file must be shared between the cron and varnish containers
VARNISHADM="varnishadm -T varnish:6082 -S /varnish.secret"
REDIS_CLI="redis-cli -h clusterdata"
VCL_NAME_ACTIVE=$($VARNISHADM vcl.list | grep "active" | awk '{print $4}')

# Check Varnish rediness
for (( i = 0; i < 10; i++ )); do
  VARNISH_STATUS=$($VARNISHADM ping | awk '{print $1}')
  if [[ $VARNISH_STATUS == "PONG" ]]; then
    echo "Varnish OK"
    break
  elif [[ $i = 9 ]]; then
    echo "Unable to read VCLs from Varnish"
    exit 1
  fi
  sleep 1
done

unset HOSTS_ARRAY
HOSTS_ARRAY=(`redis-cli -h clusterdata --csv HGETALL fb_apache_containers | tr -d '"' | sed 's/,/\ /g'`)

unset HOSTS_NAMES_ARRAY
for (( index=1; index<${#HOSTS_ARRAY[@]}; index+=2 )); do
  HOSTS_NAMES_ARRAY+=(${HOSTS_ARRAY[index]})
done
#echo "${HOSTS_NAMES_ARRAY[@]}"

# Compare backends from varnish VCL and data from clusterdata
BACKENS_ACTIVE=($($VARNISHADM vcl.show $VCL_NAME_ACTIVE | grep ".host =" | awk -F"[\"]" 'NF>2{print $2}' | tr '\n' ' '))
COMPARE=(`echo ${BACKENS_ACTIVE[@]} ${HOSTS_NAMES_ARRAY[@]} | tr ' ' '\n' | sort | uniq -u`)
if [[ ${#COMPARE[@]} == "0" ]]; then
  echo "Nothing to do here"
  exit 0
fi

# Prepare vcl config for insertion
VCL=`$VARNISHADM vcl.show $VCL_NAME_ACTIVE`
VCL=$(echo "$VCL" | sed '/#AUTOGENERATED_START/,/#AUTOGENERATED_END/c#AUTOGENERATED_START\n#AUTOGENERATED_END')

# Function for configure varnish load balancer
function LBConfigMaker() {
for (( count=1; count<=${#HOSTS_NAMES_ARRAY[@]}; count++ ))
do
    echo "backend apache_$count {
    .host = \"${HOSTS_NAMES_ARRAY[count-1]}\";
    .port = \"80\";
    .probe = {.url = \"$PROBE_FILE\";.timeout = 1s;.interval = 5s;.window = 1;.threshold = 1;}
}"
    echo ''
done
echo "sub vcl_init {
    new cluster1 = directors.round_robin();"

for (( count=1; count<=${#HOSTS_NAMES_ARRAY[@]}; count++ ))
do
   echo "    cluster1.add_backend(apache_$count);"
done
echo '}'
echo ''
echo 'sub vcl_recv {'
echo     'set req.backend_hint = cluster1.backend();'
echo '}'
}

CONFIG_FOR_INSERT=$(LBConfigMaker)

function NewVclConfig () {
echo "$VCL" | \
while IFS= read -r LINE
   do echo "$LINE"
   if [[ $LINE == "#AUTOGENERATED_START" ]]; then
       echo "$CONFIG_FOR_INSERT"
   fi
done
}

echo "$(NewVclConfig)" > $GEN_VCL_FILE

LABEL_GEN=`cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 5 | head -n 1`

$VARNISHADM vcl.load $LABEL_GEN /etc/varnish/generated.vcl warm
$VARNISHADM vcl.use $LABEL_GEN

sleep 3
VCL_AVAILABLE=(`$VARNISHADM vcl.list |grep "available" | awk '{print $4}'`)
for count in ${VCL_AVAILABLE[@]}; do
  $VARNISHADM vcl.state $count cold
  sleep 2
  $VARNISHADM vcl.discard $count
done
